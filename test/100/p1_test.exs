defmodule P1Test do
	use ExUnit.Case
	doctest P1

  alias BinaryHeap
  alias BinaryTupleHeap
	
	describe "time" do

		test "challenge" do
			[n, c, v] = "48 118 118" |> String.split(" ") |> Enum.map(&String.to_integer/1)
			sv = "14 15 8 43 21 22 9 14 20 13 26 44 42 4 19 3 11 7 27 5 42 42 31 29 30 25 7 12 3 40 19 12 33 18 31 14 27 31 37 11 27 40 18 44 33 30 8 22 10 20 38 16 18 39 3 1 14 32 24 26 28 24 28 4 17 11 18 26 15 11 38 13 1 45 16 47 31 7 28 4 28 10 35 18 22 43 17 14 38 1 2 40 13 35 33 46 2 14 45 40 14 32 42 11 43 15 4 19 13 16 38 47 22 1 7 38 10 44"
			|> String.split(" ") |> Enum.map(&String.to_integer/1)
			tv = "30 24 18 48 40 47 48 33 27 33 39 46 45 14 23 8 44 35 38 25 48 46 39 42 35 40 20 32 41 44 29 16 46 31 35 19 46 33 46 47 34 47 29 48 41 41 13 38 21 25 41 23 43 46 13 16 24 42 40 39 34 42 34 33 39 25 30 47 32 42 40 44 8 46 26 48 33 30 44 18 44 13 41 40 32 44 20 41 42 19 33 44 16 40 38 48 31 19 48 42 15 41 47 18 48 30 36 22 21 19 47 48 27 6 43 48 37 47"
			|> String.split(" ") |> Enum.map(&String.to_integer/1)
			yn = "2 5 34 39 11 43 28 34 4 37 2 11 14 42 30 13 24 24 11 7 26 16 9 6 7 5 3 39 42 40 7 35 46 15 43 10 45 26 20 35 25 21 34 43 14 29 38 38 20 45 32 43 21 14 5 10 14 40 11 14 21 3 36 22 1 35 42 4 4 14 29 34 7 30 6 6 43 24 47 37 41 22 43 2 12 33 9 12 33 5 18 16 26 33 12 15 20 3 35 43 31 6 22 26 45 12 22 33 42 41 4 34 10 46 1 28 13 22"
			|> String.split(" ") |> Enum.map(&String.to_integer/1)
			mn = "1 22 2 38 18 8 31 9 15 45 45 4 44 43 9 21 1 19 45 39 26 43 30 26 13 9 10 21 31 26 30 21 31 25 9 15 24 24 7 26 4 2 22 48 37 13 38 46 19 21 30 14 45 43 40 27 41 26 28 3 6 27 47 39 5 2 44 4 43 13 18 24 3 42 7 26 30 38 16 11 43 22 14 6 2 11 32 18 23 17 4 20 3 27 44 19 9 31 32 26 42 39 8 2 33 24 26 30 17 1 38 12 18 36 45 5 39 3"
			|> String.split(" ") |> Enum.map(&String.to_integer/1)
			output = 25

			{b1, res} = :timer.tc(&P1.solve/7, [n, c, v, sv, tv, yn, mn])

			IO.puts "binary heap 			 : #{b1}"

			assert output == res 
		end
	end
end